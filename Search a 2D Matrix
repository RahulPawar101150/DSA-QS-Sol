74. Search a 2D Matrix

*Each row is sorted in non-decreasing order.
*The first integer of each row is greater than the last integer of the previous row.
*Given an integer target, return true if target is in matrix or false otherwise.

(You must write a solution in O(log(m * n)) time complexity.)

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

#code :
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int row=0;  // searching row started from 0
        int col= matrix[0].length-1;  // search strated from end to strat col 

        while(row <= matrix.length && col>=0){ // check the matrix until the codition is true

            if(matrix[row][col] == target){  // terget found at he retuern true
                return true;
            }

            else if( target < matrix[row][col]){ // find the target using th sorted columns last to first check one by one deceasing 
                col --;
            }
            else{
                row++;  // and also we can find inreasing row 0 to last of the array 
            }
        }
        return false; //  if target is not found return false or print " Not Found"
        
    }
}
